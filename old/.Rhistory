return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
a$get()
## These allow the cashing of the inverse of a matrix
## they allow a matrix to be created an dthen cashed alowing for quick retrival
## this function allow the matrix to be set and retrives with a get
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-function() mat
list (set=set, get=get,getinverse=getinverse)
}
## this function inverts the matrix that is created in the makecashematrix function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mat <- getinverse
if *!is.null(mat){
return mat
}
matrix <-x$get()
mat <- solve(matrix)
x$setinverse(mat)
mat
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-function() mat
list (set=set, get=get,getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-function() mat
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makecashematrix(matrix(c(1,2,3,4), norw=2,ncol=2))
amatrix=makeCasheMatrix(matrix(c(1,2,3,4), norw=2,ncol=2))
amatrix<-makeCasheMatrix(matrix(c(1,2,3,4), norw=2,ncol=2))
makeCacheMatrix <- function(x = matrix()) {
+     mat <- NULL
+     set <- function(y){
+         x<<- y
+         mat<<- NULL
+     }
+     get<- function()x
+
+     getinverse <-function() mat
+     list (set=set, get=get,getinverse=getinverse)
+ }
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(function() )mat
list (set=set, get=get,getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(x)mat
list (set=set, get=get,getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(x)
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makecashematrix(matrix(c(1,2,3,4), norw=2,ncol=2))
amatrix=makeCasheMatrix(matrix(c(1,2,3,4), norw=2,ncol=2))
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(x)
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makeCasheMatrix(matrix(c(1,2,3,4), norw=2,ncol=2))
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), norw=2,ncol=2))
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2))
amatrix$get
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(function(x))
list (set=set, get=get,getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(function()x)
list (set=set, get=get,getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(function()x)
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2))
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(x)
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2))
amatrix$get()
amatrix$set(matrix(c(0,5,99,66),nrow=2,ncol=2))
amatrix$get()
amatrix$getinverse()
?solve
amatrix$set(matrix(c(10,5,99,66),nrow=2,ncol=2))
amatrix$get()
x<- matrix(c(10,5,99,66),nrow=2,ncol=2)
solve(x)
x<- matrix(c(0,5,99,66),nrow=2,ncol=2)
x
solve(x)
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(x) mat
list (set=set, get=get,getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(x)
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2))
amatrix$get()
amatrix$set(matrix(c(10,5,99,66),nrow=2,ncol=2))
amatrix$get()
amatrix$set(matrix(c(0,5,99,66),nrow=2,ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve()x
list (set=set, get=get,getinverse=getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <-solve(x)
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y){
x<<- y
mat<<- NULL
}
get<- function()x
getinverse <- solve(x)
list (set=set, get=get,getinverse=getinverse)
}
amatrix=makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2))
amatrix$get()
amatrix$getinverse()
solve(x)
?debug
?debug
library(XML)
Library(XML)
library(XML)
ls()
install.packages("XML")
library(XML)
fileUrl<- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
fileUrl
doc<- mxl(treeParse(fileUrl, UseInternal=TRUE))
doc<- xml(treeParse(fileUrl, UseInternal=TRUE))
doc<- xml(TreeParse(fileUrl, UseInternal=TRUE))
doc<- xmlTreeParse(fileUrl, UseInternal=TRUE)
doc<- xmlTreeParse(fileUrl, useInternal=TRUE)
doc
fileUrl
doc<- xmlTreeParse(fileUrl, useInternal=TRUE)
install.packages("XML2R")
libary xml2r
libary(xml2r)
library(XML)
doc<- xmlTreeParse(fileUrl, useInternal=TRUE)
library(XML2R)
doc<- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl<- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc<- xmlTreeParse(fileUrl, useInternal=TRUE
)
doc<- xmlTreeParse(fileUrl, useInternal=TRUE)
library(XML)
doc<- xmlTreeParse(fileUrl, useInternal=TRUE)
library(RCurl)
doc<- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlTreeParse(xData, useInternal =T)
doc
head(doc)
rootNode<- xmlRoot(doc)
xmlName(rootNode)
names(rootName)
names(rootNode)
rootNode[[1]]
want<- xpathSApply(rootNode, "//Zipcode", xmlvalue)
want<- xpathSApply(rootNode, "//Zipcode", xmlValue)
want
[[1]]
doc
doc[[1]]
want
want<- xpathSApply(rootNode, "//ZipCode",xmlValue)
want
want[[1]]
want[1]
rootNode
f<-xmlName(rootNode)
f
g<- names(rootNode)
g
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[3]]
rootNode[[1]][[1]][[2]]
rootNode[[1]][[1]][[2]]
want<- xpathSApply(rootNode, "//zipcode",xmlValue)
want
e<<-subset(want,zipcode==21231)
e<<-subset(want,want==21231)
e
nrow(e)
nrows(e)
nrow(want)
ncol(want)
count(want)
e
fileUrl <-  "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileUrl
myurl <- download.file(url=fileUrl, destfile="mycsv.csv", method="curl")
myurl <- download.file(url=fileUrl, destfile="mycsv.csv")
files.list
list.files()
infile<- read.csv("mycsv.csv", colClasses = "character")
head(infile)
e<<-subset(infile,infile$val==24)
e
e<<-subset(infile,infile$VAL==24)
e
nrows(e)
nrow(e)
eUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
myurl <- download.file(url=fileUrl, destfile="localcopy.xlsx", mode="wb")
files.list()
list.files()
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("JavaGD")
library(rJava)
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("XLConnect")
install.packages("XLConnect")
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
myurl <- download.file(url=fileUrl, destfile="localcopy.xlsx", mode="wb")
inFile<- read.xlsx("localcopy.xlsx",sheetIndex=1,header=True)
install.packages("kernSmooth")
install.packages("â€˜KernSmooth")
install.packages("KernSmooth")
KernSmooth()
KernSmooth
copyright(KernSmooth)
KernSmooth
KernSmooth()
library(KernSmooth)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
githob_token
GET https://github.com/login/oauth/authorize
GET ("https://github.com/login/oauth/authorize")
POST https://github.com/login/oauth/access_token
POST(" https://github.com/login/oauth/access_token")
POST("https://github.com/login/oauth/access_token")
library(httr2)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
GET ("https://github.com/login/oauth/authorize")
POST("https://github.com/login/oauth/access_token")
gtoken <- config(token = github_token)
github <- oauth_endpoints("https://api.github.com/users/jtleek/repos")
oauth_endpoints("github")
jna<-oauth_endpoints("github")
jna
myapp <- oauth_app("github", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(github, my app)
github_token <- (oauth2.0_token(github, my app)
github_token <- oauth2.0_token(jna, my app)
github_token <- oauth2.0_token(jna, myapp)
github_token <- oauth2.0_token(jna, myapp)
jna1<-oauth_endpoints("https://api.github.com/users/jtleek/repos")
myapp <- oauth_app("https://api.github.com/users/jtleek/repos", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
myapp
github_token <- oauth2.0_token(jna, myapp)
jna
github_token <- oauth2.0_token(jna, myapp)
gtoken<- config(token=github_token)
req<- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
req2 <- fromJSON(req$url)
install.packages("jsonlite")
req2 <- fromJSON(req$url)
library(jsonlite)
library(jsonlite)
req2 <- fromJSON(req$url)
install.packages("jsonlite")
library(jsonlite)
jk<-content(req)
req
req2 <- fromJSON(req$url)
req2
req2%>%
select(name, created_at)%>%
filter(name == "datasharing")%>%
print
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData
req2
req2
ws<-content(req)
jsonData <- fromJSON(req$url)
jsonData
json<-fromJSON("https://api.github.com/users/jtleek/repos")
json
json
zx<-filter(name == "datasharing")
head(json)
cv<-select(name, created_at)
cv<-json(name, created_at)
cv<- sunset(json, name=="datasharing")
cv<- subset(json, name=="datasharing")
cv
bn<- cv$created_at
bn
library(httr)
library(httpuv)
library(jsonlite)
jna<-oauth_endpoints("github")
myapp <- oauth_app("https://api.github.com/users/jtleek/repos", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(jna, myapp)
gtoken<- config(token=github_token)
req<- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
json<-fromJSON("https://api.github.com/users/jtleek/repos")
zx<-filter(name == "datasharing")
json
cv<- subset(json, name=="datasharing")
bn<- cv$created_at
bn
cv
library(jpeg)
photo<- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg" , native = FALSE)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
url
photo<- readJPEG(url , native = FALSE)
photo<- readJPEG(url , mode = "wb", native = FALSE)
img <- readJPEG(system.file("img", "Rlogo.jpg", package="jpeg"))
img
photo2<- readJPEG(system.file("img",url,package="jpeg"))
photo2<- readJPEG(system.file(url,package="jpeg"))
photo<- readJPEG(url ,  native = FALSE)
url
write img
writejpeg(img)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
url
files.list()
list.files()
getwd
getwd()
setwd (c:/datasci_r)
setwd ("c:/datasci_r")
getwd
getwd()
list.files()
photo3<-readJPEG(pic2, native=False)
pic2<-"Picture1.jpg"
photo3<-readJPEG(pic2, native=False)
photo3<-readJPEG(pic2, native=FALSE)
photo3
q1<- quartile(photo3)
q1<- quantile(photo3)
q1
q2<- quantile(photo3, probs=c(0.3,0.8))
q2
photo4<-readJPEG(pic2, native=TRUE)
q3<- quantile(photo4, probs=c(0.3,0.8))
q3
q3<- quantile(photo4, probs=c(0.3,0.8))
q3<- quantile(photo4)
q3
q3<- quantile(photo4, probs=c(0.3,0.5,0.8))
q3
q3<- quantile(photo4, probs=c(0.31,0.5,0.81))
q3
photo4<-readJPEG(pic2, native=TRUE)
q3<- quantile(photo4, probs=c(0.31,0.5,0.81))
q3
q3<- quantile(photo4, probs=c(0.3,0.5,0.8))
q3
length(photo4)
head(photo4)
str(photo4)
library(tools)
md5sum(photo3)
md5sum("Picture1.jpg")
str(photo4)
pic2<-"Picture2.jpg"
photo4<-readJPEG(pic2, native=TRUE)
str(photo4)
q3<- quantile(photo4, probs=c(0.3,0.5,0.8))
q3
clear
