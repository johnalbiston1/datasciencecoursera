fileUrl
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL, ssl.verifypeer = FALSE)
doc <- xmlTreeParse(xData, useInternal =T)
doc
head(doc)
rootNode<- xmlRoot(doc)
xmlName(rootNode)
names(rootName)
names(rootNode)
rootNode[[1]]
want<- xpathSApply(rootNode, "//Zipcode", xmlvalue)
want<- xpathSApply(rootNode, "//Zipcode", xmlValue)
want
[[1]]
doc
doc[[1]]
want
want<- xpathSApply(rootNode, "//ZipCode",xmlValue)
want
want[[1]]
want[1]
rootNode
f<-xmlName(rootNode)
f
g<- names(rootNode)
g
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[3]]
rootNode[[1]][[1]][[2]]
rootNode[[1]][[1]][[2]]
want<- xpathSApply(rootNode, "//zipcode",xmlValue)
want
e<<-subset(want,zipcode==21231)
e<<-subset(want,want==21231)
e
nrow(e)
nrows(e)
nrow(want)
ncol(want)
count(want)
e
fileUrl <-  "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileUrl
myurl <- download.file(url=fileUrl, destfile="mycsv.csv", method="curl")
myurl <- download.file(url=fileUrl, destfile="mycsv.csv")
files.list
list.files()
infile<- read.csv("mycsv.csv", colClasses = "character")
head(infile)
e<<-subset(infile,infile$val==24)
e
e<<-subset(infile,infile$VAL==24)
e
nrows(e)
nrow(e)
eUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
myurl <- download.file(url=fileUrl, destfile="localcopy.xlsx", mode="wb")
files.list()
list.files()
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("JavaGD")
library(rJava)
library(xlsx)
install.packages("rJava")
library(xlsx)
install.packages("XLConnect")
install.packages("XLConnect")
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
myurl <- download.file(url=fileUrl, destfile="localcopy.xlsx", mode="wb")
inFile<- read.xlsx("localcopy.xlsx",sheetIndex=1,header=True)
install.packages("kernSmooth")
install.packages("â€˜KernSmooth")
install.packages("KernSmooth")
KernSmooth()
KernSmooth
copyright(KernSmooth)
KernSmooth
KernSmooth()
library(KernSmooth)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
githob_token
GET https://github.com/login/oauth/authorize
GET ("https://github.com/login/oauth/authorize")
POST https://github.com/login/oauth/access_token
POST(" https://github.com/login/oauth/access_token")
POST("https://github.com/login/oauth/access_token")
library(httr2)
install.packages("httpuv")
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
GET ("https://github.com/login/oauth/authorize")
POST("https://github.com/login/oauth/access_token")
gtoken <- config(token = github_token)
github <- oauth_endpoints("https://api.github.com/users/jtleek/repos")
oauth_endpoints("github")
jna<-oauth_endpoints("github")
jna
myapp <- oauth_app("github", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(github, my app)
github_token <- (oauth2.0_token(github, my app)
github_token <- oauth2.0_token(jna, my app)
github_token <- oauth2.0_token(jna, myapp)
github_token <- oauth2.0_token(jna, myapp)
jna1<-oauth_endpoints("https://api.github.com/users/jtleek/repos")
myapp <- oauth_app("https://api.github.com/users/jtleek/repos", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
myapp
github_token <- oauth2.0_token(jna, myapp)
jna
github_token <- oauth2.0_token(jna, myapp)
gtoken<- config(token=github_token)
req<- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
req2 <- fromJSON(req$url)
install.packages("jsonlite")
req2 <- fromJSON(req$url)
library(jsonlite)
library(jsonlite)
req2 <- fromJSON(req$url)
install.packages("jsonlite")
library(jsonlite)
jk<-content(req)
req
req2 <- fromJSON(req$url)
req2
req2%>%
select(name, created_at)%>%
filter(name == "datasharing")%>%
print
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData
req2
req2
ws<-content(req)
jsonData <- fromJSON(req$url)
jsonData
json<-fromJSON("https://api.github.com/users/jtleek/repos")
json
json
zx<-filter(name == "datasharing")
head(json)
cv<-select(name, created_at)
cv<-json(name, created_at)
cv<- sunset(json, name=="datasharing")
cv<- subset(json, name=="datasharing")
cv
bn<- cv$created_at
bn
library(httr)
library(httpuv)
library(jsonlite)
jna<-oauth_endpoints("github")
myapp <- oauth_app("https://api.github.com/users/jtleek/repos", key="4080a42ac2e06422d580", secret="52a03dc655363cf737fab0e23676ae4d830b7956")
github_token <- oauth2.0_token(jna, myapp)
gtoken<- config(token=github_token)
req<- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
json<-fromJSON("https://api.github.com/users/jtleek/repos")
zx<-filter(name == "datasharing")
json
cv<- subset(json, name=="datasharing")
bn<- cv$created_at
bn
cv
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(package)
?group_by
by_package<-group_by(package)
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean)
by_package(summarize(mean))
summarize(mean(by_package))
summarize(mean(size))
summarize(mean(by_package$size))
summarize(by_package(mean(size)))
summarize(mean(size))
summarize(by_package,mean(size))
submit()
swirl()
submit()
sumit()
submit()
swirl()
reset()
swirl()
reset()
swirl()
submit()
swirl()
library(swirl)
swirl()
submit()
swirl()
library(dplyr)
cran<- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package(cran,package)
by_package<-group_by(cran, package)
by_package
summerize(by_package,mean(size))
summarize(by_package,mean(size))
submit()
swirl()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum,count>679)
top_counts<- filter(pack_sum,count>679)
top_counts
head(top_counts, 20)
arrange(top_counts,count)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
top_unique
arrange(top_unique,desc(unique) )
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
size_mb
submit()
reset()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5)
print(cran)
submit()
submit()
submit()
fd<-mutate(size_mb = size / 2^20) %>%
))
submit()
submit()
submit()
submit()
submit()
?filter
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit
cran
submit()
submit()
submit()
submit()
submit()
submit()
submit()
print
submit()
submit()
finish
finish()
submit()
submit
submit()
submit()
swirl()
print
submit()
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit
submit()
submit()
submit()
swirl()
print(cran)
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
print
submit()
submit()
swirl()
reset()
submit()
swirl()
finsih
finish
finish()
submit()
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<- gather(students2,sex_class,count)
res<- gather(students2,sex_class,count, -grade)
res
?separate
separate(res,data = res, col = sex_class, into = c("sex","class"))
separate(res, sex_class, into = c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
swirl()
students4
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status= "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind(passed, failed)
rbind_list(passed, failed)
sat
submit
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=-TRUE)
wday(this_day,label=TRUE)
this_moment<- now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy( 25081985)
ymd("192012")
ymd("1/9/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hh:mm:ss( "03:22:14")
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_momemt<- update(this_moment, now())
this_momemt<- update(this_moment,  hours = 10, minutes = 16, seconds = 0)
this_moment<- update(this_moment,  hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
info()
this_moment<-update(this_moment, hours = 11, minutes = 35, seconds = 0)
this_moment<-update(this_moment, hours = 11, minutes = 35, seconds = 0)
now()
this_moment<-update(this_moment, hours = 11, minutes = 36, seconds = 0)
info()
skip()
skip()
this_moment<-update(this_moment, hm(now()))
this_moment<-update(this_moment, now())
this_moment<-update(this_moment,hms("10:16:14"))
this_moment<-update(this_moment,update(this_moment, hours = 10, minutes = 16, seconds = 0))
ship()
skip()
skip()
info()
skip()
skip()
Sys.setlocale("LC_TIME", "English")
this_moment<-update(this_moment,update(this_moment, hours = 10, minutes = 16, seconds = 0))
now()
this_moment<-update(this_moment,update(this_moment, hours = 11, minutes = 41, seconds = 0))
Sys.setlocale("LC_TIME", "C")
this_moment<-update(this_moment,update(this_moment, hours = 11, minutes = 41, seconds = 0))
skip()
skip()
Sys.setlocale("LC_TIME", "C")
info()
bye()
files.list
list.files
pwd
pwd()
getwd()
setwd("c:/datasci_r/data")
getwd()
list.files
files.list
files.list()
list.files()
newdata<- read.csv(getdata-data-ss06hid (2).csv)
newdata<- read.csv("getdata-data-ss06hid (2).csv")
head(newdata)
ans1<-strsplit(newdata,"wgtp")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn
head(amzn)
sampleTimes = index(amzn)
sampleTimes
nrow(amzn)
year(sampleTimes)
yans<-year(sampleTimes)s)
yans<-year(sampleTimes)
yans
filter(yans,2012)
yans1<- filter(yans, c(2012))
yans1<- subset(yans, c(2012))
yans1<- subset(yans, yans[1]=2012)
yans1<- subset(yans, yans[1]==2012)
yans1
nrow(yans1)
yans[1]
yans1<- subset(yans, yans=2012)
yans1<- subset(yans, yans==2012)
yans1
nrow(yans1)
mans<- month(sampleTimes)
mans
dans<- day(sampleTimes)
dans
dans<- wday(sampleTimes)
dans
dans<- wday(sampleTimes, label=False)
dans<- wday(sampleTimes, label=FALSE)
dans
dans<- wday(sampleTimes, label=TRUE)
dans
mans1<- subset( sampleTimes,yans==2012,dans==Mon )
mans1
mans1<- subset( yans1,dans==Mon )
mans1<- subset( yans1,dans=="Mon")
mans1
newdata<- read.csv("getdata-data-ss06hid (2).csv")
head(newdata)
ncol(newdata)
ans1<-strsplit(newdata[,1],"wgtp")
ans1<-strsplit(newdata[,1],split=="wgtp")
ans1<-strsplit(names(newdata),"wgtp")
ans1
ans1[[123]]
